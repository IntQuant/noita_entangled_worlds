use crate::noita::types::{
    ComponentData, CutThroughWorldConfig, DamagesByTypeConfig, GunActionInfoConfig, GunConfig,
    NpcPartyConfig, PendingPortalConfig, StdMap, StdString, StdVec, Vec2, Vec2i,
};
use std::ffi::c_void;
pub trait Component {
    const NAME: &'static str;
}
#[derive(Debug)]
#[repr(C)]
pub struct WalletComponent {
    pub money: u64,
    pub money_spent: u64,
    pub m_money_prev_frame: u64,
    pub m_has_reached_inf: bool,
    padding: [u8; 3],
}
impl Component for WalletComponent {
    const NAME: &'static str = "WalletComponent";
}
#[derive(Debug)]
#[repr(C)]
pub struct ItemComponent {
    pub data: ComponentData,
    pub item_name: StdString,
    pub is_stackable: bool,
    pub is_consumable: bool,
    pub stats_count_as_item_pick_up: bool,
    pub auto_pickup: bool,
    pub permanently_attached: bool,
    padding: [u8; 3],
    pub uses_remaining: isize,
    pub is_identified: bool,
    pub is_frozen: bool,
    pub collect_nondefault_actions: bool,
    pub remove_on_death: bool,
    pub remove_on_death_if_empty: bool,
    pub remove_default_child_actions_on_death: bool,
    pub play_hover_animation: bool,
    pub play_spinning_animation: bool,
    pub is_equipable_forced: bool,
    pub play_pick_sound: bool,
    pub drinkable: bool,
    padding1: u8,
    pub spawn_pos: Vec2,
    pub max_child_items: isize,
    pub ui_sprite: StdString,
    pub ui_description: StdString,
    pub preferred_inventory: usize,
    pub enable_orb_hacks: u8,
    pub is_all_spells_book: u8,
    pub always_use_item_name_in_ui: bool,
    padding2: u8,
    pub custom_pickup_string: StdString,
    pub ui_display_description_on_pick_up_hint: bool,
    padding3: [u8; 3],
    pub inventory_slot: Vec2i,
    pub next_frame_pickable: isize,
    pub npc_next_frame_pickable: isize,
    pub is_pickable: bool,
    pub is_hittable_always: bool,
    paddin4: [u8; 2],
    pub item_pickup_radius: f32,
    pub camera_max_distance: f32,
    pub camera_smooth_speed_multiplier: f32,
    pub has_been_picked_by_player: bool,
    padding5: [u8; 3],
    pub m_frame_picked_up: isize,
    pub m_item_uid: isize,
    pub m_is_identified: bool,
    padding6: [u8; 3],
}

impl Component for ItemComponent {
    const NAME: &'static str = "ItemComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct ItemActionComponent {
    pub action_id: StdString,
}

impl Component for ItemActionComponent {
    const NAME: &'static str = "ItemActionComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct MaterialInventoryComponent {
    pub data: ComponentData,
    pub drop_as_item: bool,
    pub on_death_spill: bool,
    pub leak_gently: bool,
    padding1: u8,
    pub leak_on_damage_percent: f32,
    pub leak_pressure_min: f32,
    pub leak_pressure_max: f32,
    pub min_damage_to_leak: f32,
    pub b2_force_on_leak: f32,
    pub death_throw_particle_velocity_coeff: f32,
    pub kill_when_empty: bool,
    pub halftime_materials: bool,
    padding2: [u8; 2],
    pub do_reactions: isize,
    pub do_reactions_explosions: bool,
    pub do_reactions_entities: bool,
    padding3: [u8; 2],
    pub reaction_speed: isize,
    pub reactions_shaking_speeds_up: bool,
    padding4: [u8; 3],
    pub max_capacity: f64,
    pub count_per_material_type: StdVec<f64>,
    pub audio_collision_size_modifier_amount: f32,
    pub is_death_handled: bool,
    padding5: [u8; 3],
    pub last_frame_drank: isize,
    pub ex_position: Vec2,
    pub ex_angle: f32,
}

impl Component for MaterialInventoryComponent {
    const NAME: &'static str = "MaterialInventoryComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct DamageModelComponent {
    pub data: ComponentData,
    pub hp: f64,
    pub max_hp: f64,
    pub max_hp_cap: f64,
    pub max_hp_old: f64,
    pub damage_multipliers: DamagesByTypeConfig,
    pub critical_damage_resistance: f32,
    pub invincibility_frames: isize,
    pub falling_damages: bool,
    padding1: [u8; 3],
    pub falling_damage_height_min: f32,
    pub falling_damage_height_max: f32,
    pub falling_damage_damage_min: f32,
    pub falling_damage_damage_max: f32,
    pub air_needed: bool,
    padding2: [u8; 3],
    pub air_in_lungs: f32,
    pub air_in_lungs_max: f32,
    pub air_lack_of_damage: f32,
    pub minimum_knockback_force: f32,
    pub materials_damage: bool,
    padding3: [u8; 3],
    pub material_damage_min_cell_count: isize,
    pub materials_that_damage: StdString,
    pub materials_how_much_damage: StdString,
    pub materials_damage_proportional_to_maxhp: bool,
    pub physics_objects_damage: bool,
    pub materials_create_messages: bool,
    padding4: u8,
    pub materials_that_create_messages: StdString,
    pub ragdoll_filenames_file: StdString,
    pub ragdoll_material: StdString,
    pub ragdoll_offset_x: f32,
    pub ragdoll_offset_y: f32,
    pub ragdoll_fx_forced: isize, // enum
    pub blood_material: StdString,
    pub blood_spray_material: StdString,
    pub blood_spray_create_some_cosmetic: bool,
    padding5: [u8; 3],
    pub blood_multiplier: f32,
    pub ragdoll_blood_amount_absolute: isize,
    pub blood_sprite_directional: StdString,
    pub blood_sprite_large: StdString,
    pub healing_particle_effect_entity: StdString,
    pub create_ragdoll: bool,
    pub ragdollify_child_entity_sprites: bool,
    padding6: [u8; 2],
    pub ragdollify_root_angular_damping: f32,
    pub ragdollify_disintegrate_nonroot: bool,
    pub wait_for_kill_flag_on_death: bool,
    pub kill_now: bool,
    pub drop_items_on_death: bool,
    pub ui_report_damage: bool,
    pub ui_force_report_damage: bool,
    padding7: [u8; 2],
    pub in_liquid_shooting_electrify_prob: isize,
    pub wet_status_effect_damage: f32,
    pub is_on_fire: bool,
    padding8: [u8; 3],
    pub fire_probability_of_ignition: f32,
    pub fire_how_much_fire_generates: isize,
    pub fire_damage_ignited_amount: f32,
    pub fire_damage_amount: f32,
    pub m_is_on_fire: bool,
    padding9: [u8; 3],
    pub m_fire_probability: isize,
    pub m_fire_frames_left: isize,
    pub m_fire_duration_frames: isize,
    pub m_fire_tried_igniting: bool,
    padding10: [u8; 3],
    pub m_last_check_x: isize,
    pub m_last_check_y: isize,
    pub m_last_check_time: isize,
    pub m_last_material_damage_frame: isize,
    pub m_fall_is_on_ground: bool,
    padding11: [u8; 3],
    pub m_fall_highest_y: f32,
    pub m_fall_count: isize,
    pub m_air_are_we_in_water: bool,
    padding12: [u8; 3],
    pub m_air_frames_not_in_water: isize,
    pub m_air_do_we_have: bool,
    padding13: [u8; 3],
    pub m_total_cells: isize,
    pub m_liquid_count: isize,
    pub m_liquid_material_we_are_in: isize,
    pub m_damage_materials: StdVec<isize>,
    pub m_damage_materials_how_much: StdVec<f32>,
    pub m_collision_message_materials: StdVec<isize>,
    pub m_collision_message_material_counts_this_frame: StdVec<isize>,
    pub m_material_damage_this_frame: StdVec<f32>,
    pub m_fall_damage_this_frame: f32,
    pub m_electricity_damage_this_frame: f32,
    pub m_physics_damage_this_frame: f32,
    pub m_physics_damage_vec_this_frame: Vec2,
    pub m_physics_damage_last_frame: isize,
    pub m_physics_damage_entity: usize,
    pub m_physics_damage_telekinesis_caster_entity: usize,
    pub m_last_damage_frame: isize,
    pub m_hp_before_last_damage: f64,
    pub m_last_electricity_resistance_frame: isize,
    pub m_last_frame_reported_block: isize,
    pub m_last_max_hp_change_frame: isize,
    pub m_fire_damage_buffered: f32,
    pub m_fire_damage_buffered_next_delivery_frame: isize,
}

impl Component for DamageModelComponent {
    const NAME: &'static str = "DamageModelComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct UIIconComponent {
    pub data: ComponentData,
    pub icon_sprite_file: StdString,
    pub name: StdString,
    pub description: StdString,
    pub display_above_head: bool,
    pub display_in_hud: bool,
    pub is_perk: bool,
    padding: u8,
}

impl Component for UIIconComponent {
    const NAME: &'static str = "UIIconComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct AbilityComponent {
    pub data: ComponentData,
    pub cooldown_frames: isize,
    pub entity_file: StdString,
    pub sprite_file: StdString,
    pub entity_count: isize,
    pub never_reload: bool,
    padding1: [u8; 3],
    pub reload_time_frames: isize,
    pub mana: f32,
    pub mana_max: f32,
    pub mana_charge_speed: f32,
    pub rotate_in_hand: bool,
    padding2: [u8; 3],
    pub rotate_in_hand_amount: f32,
    pub rotate_hand_amount: f32,
    pub fast_projectile: bool,
    padding3: [u8; 3],
    pub swim_propel_amount: f32,
    pub max_charged_actions: isize,
    pub charge_wait_frames: isize,
    pub item_recoil_recovery_speed: f32,
    pub item_recoil_max: f32,
    pub item_recoil_offset_coeff: f32,
    pub item_recoil_rotation_coeff: f32,
    pub base_item_file: StdString,
    pub use_entity_file_as_projectile_info_proxy: bool,
    pub click_to_use: bool,
    padding4: [u8; 2],
    pub stat_times_player_has_shot: isize,
    pub stat_times_player_has_edited: isize,
    pub shooting_reduces_amount_in_inventory: bool,
    pub throw_as_item: bool,
    pub simulate_throw_as_item: bool,
    padding5: u8,
    pub max_amount_in_inventory: isize,
    pub amount_in_inventory: isize,
    pub drop_as_item_on_death: bool,
    padding6: [u8; 3],
    pub ui_name: StdString,
    pub use_gun_script: bool,
    pub is_petris_gun: bool,
    padding7: [u8; 2],
    pub gun_config: GunConfig,
    pub gunaction_config: GunActionInfoConfig,
    pub gun_level: isize,
    pub add_these_child_actions: StdString,
    pub current_slot_durability: isize,
    pub slot_consumption_function: StdString,
    pub m_next_frame_usable: isize,
    pub m_cast_delay_start_frame: isize,
    pub m_ammo_left: isize,
    pub m_reload_frames_left: isize,
    pub m_reload_next_frame_usable: isize,
    pub m_charge_count: isize,
    pub m_next_charge_frame: isize,
    pub m_item_recoil: f32,
    pub m_is_initialized: bool,
    padding8: [u8; 3],
}

impl Component for AbilityComponent {
    const NAME: &'static str = "AbilityComponent";
}

#[derive(Debug)]
#[repr(C)]
pub struct WorldStateComponent {
    pub data: ComponentData,
    pub is_initialized: bool,
    padding1: [u8; 3],
    pub time: f32,
    pub time_total: f32,
    pub time_dt: f32,
    pub day_count: isize,
    pub rain: f32,
    pub rain_target: f32,
    pub fog: f32,
    pub fog_target: f32,
    pub intro_weather: bool,
    padding2: [u8; 3],
    pub wind: f32,
    pub wind_speed: f32,
    pub wind_speed_sin_t: f32,
    pub wind_speed_sin: f32,
    pub clouds_01_target: f32,
    pub clouds_02_target: f32,
    pub gradient_sky_alpha_target: f32,
    pub sky_sunset_alpha_target: f32,
    pub lightning_count: isize,
    pub player_spawn_location: Vec2,
    pub lua_globals: StdMap<StdString, StdString>,
    pub pending_portals: StdVec<PendingPortalConfig>,
    pub next_portal_id: usize,
    pub apparitions_per_level: StdVec<isize>,
    pub npc_parties: StdVec<NpcPartyConfig>,
    pub session_stat_file: StdString,
    pub orbs_found_thisrun: StdVec<isize>,
    pub flags: StdVec<StdString>,
    pub changed_materials: StdVec<StdString>,
    pub player_polymorph_count: isize,
    pub player_polymorph_random_count: isize,
    pub player_did_infinite_spell_count: isize,
    pub player_did_damage_over_1milj: isize,
    pub player_living_with_minus_hp: isize,
    pub global_genome_relations_modifier: f32,
    pub mods_have_been_active_during_this_run: bool,
    pub twitch_has_been_active_during_this_run: bool,
    padding3: [u8; 2],
    pub next_cut_through_world_id: usize,
    pub cuts_through_world: StdVec<CutThroughWorldConfig>,
    pub gore_multiplier: isize,
    unknown1: usize,
    unknown2: isize,
    pub trick_kill_gold_multiplier: isize,
    unknown3: usize,
    unknown4: isize,
    pub damage_flash_multiplier: f32,
    unknown5: usize,
    unknown6: isize,
    pub open_fog_of_war_everywhere: bool,
    padding9: [u8; 3],
    unknown7: isize,
    pub consume_actions: bool,
    padding10: [u8; 3],
    unknown8: isize,
    pub perk_infinite_spells: bool,
    pub perk_trick_kills_blood_money: bool,
    padding4: [u8; 2],
    pub perk_hp_drop_chance: isize,
    pub perk_gold_is_forever: bool,
    pub perk_rats_player_friendly: bool,
    pub everything_to_gold: bool,
    padding5: u8,
    pub material_everything_to_gold: StdString,
    pub material_everything_to_gold_static: StdString,
    pub infinite_gold_happening: bool,
    pub ending_happiness_happening: bool,
    padding6: [u8; 2],
    pub ending_happiness_frames: isize,
    pub ending_happiness: bool,
    padding7: [u8; 3],
    pub m_flash_alpha: f32,
    pub debug_loaded_from_autosave: isize,
    pub debug_loaded_from_old_version: isize,
    pub rain_target_extra: f32,
    pub fog_target_extra: f32,
    pub perk_rats_player_friendly_prev: bool,
    padding8: [u8; 3],
}

impl Component for WorldStateComponent {
    const NAME: &'static str = "WorldStateComponent";
}

#[derive(Debug)]
pub enum LuaVmType {
    SharedByManyComponents,
    CreateNewEveryExecution,
    OnePerComponentInstance,
}

#[derive(Debug)]
#[repr(C)]
pub struct LuaComponent {
    pub data: ComponentData,
    pub script_source_file: StdString,
    pub vm_type: LuaVmType,
    pub execute_on_added: bool,
    pub execute_on_removed: bool,
    padding1: [u8; 2],
    pub execute_every_n_frame: isize,
    pub execute_times: isize,
    pub limit_how_many_times_per_frame: isize,
    pub limit_to_every_n_frame: isize,
    pub limit_all_callbacks: bool,
    pub remove_after_executed: bool,
    pub enable_coroutines: bool,
    pub call_init_function: bool,
    pub script_enabled_changed: StdString,
    pub script_damage_received: StdString,
    pub script_damage_about_to_be_received: StdString,
    pub script_item_picked_up: StdString,
    pub script_shot: StdString,
    pub script_collision_trigger_hit: StdString,
    pub script_collision_trigger_timer_finished: StdString,
    pub script_physics_body_modified: StdString,
    pub script_pressure_plate_change: StdString,
    pub script_inhaled_material: StdString,
    pub script_death: StdString,
    pub script_throw_item: StdString,
    pub script_material_area_checker_failed: StdString,
    pub script_material_area_checker_success: StdString,
    pub script_electricity_receiver_switched: StdString,
    pub script_electricity_receiver_electrified: StdString,
    pub script_kick: StdString,
    pub script_interacting: StdString,
    pub script_audio_event_dead: StdString,
    pub script_wand_fired: StdString,
    pub script_teleported: StdString,
    pub script_portal_teleport_used: StdString,
    pub script_polymorphing_to: StdString,
    pub script_biome_entered: StdString,
    pub m_last_execution_frame: isize,
    pub m_times_executed_this_frame: isize,
    pub m_mod_appends_done: bool,
    padding2: [u8; 3],
    pub m_next_execution_time: isize,
    pub m_times_executed: isize,
    pub m_lua_manager: *const c_void,
    pub m_persistent_values: isize,
}

impl Component for LuaComponent {
    const NAME: &'static str = "LuaComponent";
}
#[derive(Debug)]
#[repr(C)]
pub struct StatusEffectDataComponent {
    pub data: ComponentData,
    unk: isize,
    pub stain_effects: StdVec<f32>,
    pub stain_effects_cooldowns: StdVec<f32>,
    pub stain_effects_previous: StdVec<f32>,
    pub ingestion_effects: StdVec<f32>,
    pub ingestion_effect_causes: StdVec<f32>,
    pub ingestion_effect_causes_many: StdVec<f32>,
    pub last_attacking_player_frame: isize,
    pub stain_effects_smoothed_ui: StdVec<f32>,
    pub has_child_icons_cached: bool,
    padding: [u8; 3],
}

impl Component for StatusEffectDataComponent {
    const NAME: &'static str = "StatusEffectDataComponent";
}
